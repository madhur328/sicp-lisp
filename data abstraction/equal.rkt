#lang racket

(define (equal? x y)
  (cond ((and (null? x) (null? y)) #t)
        ((and (number? x) (number? y)) (= x y))
        ((and (symbol? x) (symbol? y)) (eq? x y))
        ((and (pair? x) (pair? y)) (and (equal? (car x) (car y)) 
                                        (equal? (cdr x) (cdr y))))
        (else #f)))

(equal? null null)        
(equal? null 1)        
(equal? 5 null)        
(equal? 'a null)        
(equal? null 'apple)        
(equal? null '(apple boy cat))        
(equal? '(apple boy cat dog) null)        
(equal? 5 1)        
(equal? 5 5)        
(equal? 'ab 'ab )        
(equal? 'ab 'acs )        
(equal? 'ab '(apple boy cat dog))        
(equal? '(apple boy cat dog) '(apple boy cat dog))        
(equal? '(apple boy dog) '(apple boy cat dog))        