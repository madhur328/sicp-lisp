#lang racket

(define (make-interval a b) (cons (min a b) (max a b)))

(define (upper-bound x) (cdr x))

(define (lower-bound x) (car x))

(define (sub-interval x y)
  (make-interval (- (lower-bound x)
                    (upper-bound y))
                 (- (upper-bound x)
                    (lower-bound y))))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((pl (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min pl p2 p3 p4)
                   (max pl p2 p3 p4))))

(define (div-interval x y) 
   (if (<= (* (lower-bound y) (upper-bound y)) 0) 
       (error "Division error (interval spans 0)" y) 
       (mul-interval x  
                     (make-interval (/ 1. (upper-bound y)) 
                                    (/ 1. (lower-bound y)))))) 

(define (eq-interval? x y)
  (and (= (lower-bound x) (lower-bound y))
       (= (upper-bound x) (upper-bound y))))                            

(define (mul-interval2 x y)
  (define (opp-sign-interval? x)
    (and (< (lower-bound x) 0) (> (upper-bound x) 0)))                            
  (define (positive-sign-interval? x)
    (and (> (lower-bound x) 0) (> (upper-bound x) 0)))
  (define (negative-sign-interval? x)
    (and (< (lower-bound x) 0) (< (upper-bound x) 0)))
  (cond ((and (positive-sign-interval? x) (positive-sign-interval? y))
          (display "case 1")
          (make-interval (* (lower-bound x) (lower-bound y))
                         (* (upper-bound x) (upper-bound y))))
        ((and (positive-sign-interval? x) (opp-sign-interval? y))
          (display "case 2")
          (make-interval (* (upper-bound x) (lower-bound y))
                         (* (upper-bound x) (upper-bound y))))
        ((and (positive-sign-interval? x) (negative-sign-interval? y))
          (display "case 3")
          (make-interval (* (upper-bound x) (lower-bound y))
                         (* (lower-bound x) (upper-bound y))))
        ((and (opp-sign-interval? x) (positive-sign-interval? y))
          (display "case 4")
          (make-interval (* (lower-bound x) (upper-bound y))
                         (* (upper-bound x) (upper-bound y))))
        ((and (opp-sign-interval? x) (opp-sign-interval? y))
          (display "case 5")
          (make-interval (min (* (upper-bound x) (lower-bound y)) (* (lower-bound x) (upper-bound y)))
                         (max (* (upper-bound x) (upper-bound y)) (* (lower-bound x) (lower-bound y)))))
        ((and (opp-sign-interval? x) (negative-sign-interval? y))
          (display "case 6")
          (make-interval (* (upper-bound x) (lower-bound y))
                         (* (lower-bound x) (lower-bound y))))
        ((and (negative-sign-interval? x) (positive-sign-interval? y))
          (display "case 7")
          (make-interval (* (lower-bound x) (upper-bound y))
                         (* (upper-bound x) (lower-bound y))))
        ((and (negative-sign-interval? x) (opp-sign-interval? y))
          (display "case 8")
          (make-interval (* (lower-bound x) (upper-bound y))
                         (* (lower-bound x) (lower-bound y))))
        ((and (negative-sign-interval? x) (negative-sign-interval? y))
          (display "case 9")
          (make-interval (* (upper-bound x) (upper-bound y))
                         (* (lower-bound x) (lower-bound y))))))

; (define a1 (make-interval 3 6))                              
; (define b1 (make-interval -2 7))                              
; (define c1 (make-interval -6 -2))
; (define a2 (make-interval 5 8))                              
; (define b2 (make-interval -4 6))                              
; (define c2 (make-interval -8 -4))
; (mul-interval2 a1 a2)                              
; (mul-interval2 a1 b2)                              
; (mul-interval2 a1 c2)                              
; (mul-interval2 b1 a2)                              
; (mul-interval2 b1 b2)                              
; (mul-interval2 b1 c2)                              
; (mul-interval2 c1 a2)                              
; (mul-interval2 c1 b2)                              
; (mul-interval2 c1 c2)
; (eq-interval? (mul-interval2 a1 a2) (mul-interval a1 a2))                              
; (eq-interval? (mul-interval2 a1 b2) (mul-interval a1 b2))                              
; (eq-interval? (mul-interval2 a1 c2) (mul-interval a1 c2))                              
; (eq-interval? (mul-interval2 b1 a2) (mul-interval b1 a2))                              
; (eq-interval? (mul-interval2 b1 b2) (mul-interval b1 b2))                              
; (eq-interval? (mul-interval2 b1 c2) (mul-interval b1 c2))                              
; (eq-interval? (mul-interval2 c1 a2) (mul-interval c1 a2))                              
; (eq-interval? (mul-interval2 c1 b2) (mul-interval c1 b2))                              
; (eq-interval? (mul-interval2 c1 c2) (mul-interval c1 c2))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-center-percent c per)
  (make-center-width c (* c (/ per 100.0))))

(define (percent i)
  (* (/ (width i) (center i)) 100.0))

; (define i (make-center-percent 10 50))
; (lower-bound i) 
; (upper-bound i) 
; (center i) 
; (percent i)

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

; (define r1 (make-interval 5.2 5.6))
; (define r2 (make-interval 103 106))
; (par1 r1 r2)
; (par2 r1 r2)  ; results are different with different but equivalent algebraic expressions 
(define A (make-interval 5 10))
(define B (make-interval 1000 1000.6))
(define C (make-interval 12 14))
; (div-interval A A)
; (percent A)
; (percent (div-interval A A))  ; for large percentage tolerance intervals, combined percentage tolerance is less than addition of two  % tolerances 
(div-interval B B)
(percent B)
(percent (div-interval B B))  ; for small percentage tolerances it is approximately equal to sum of % tolerances