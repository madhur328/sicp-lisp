#lang racket

(define *op-table* (make-hash))

(define (put op type item)
  (hash-set! *op-table* (list op type) item))

(define (get op type)
  (hash-ref *op-table* (list op type) #f))

(define *coercion-table* (make-hash))  

(define (put-coercion type1 type2 item)
  (hash-set! *coercion-table* (list type1 type2) item))

(define (get-coercion type1 type2)
  (hash-ref *coercion-table* (list type1 type2) #f))

(define (square x) (* x x))

(define (attach-tag type-tag contents)
  (if (eq? type-tag 'scheme-number)
      contents
      (cons type-tag contents)))

(define (type-tag datum)
  (cond ((pair? datum) (car datum))
        ((number? datum) 'scheme-number)
        (else (error "Bad tagged datum -- TYPE-TAG" datum))))  

(define (contents datum)
  (cond ((pair? datum) (cdr datum))
        ((number? datum) datum)
        (else (error "Bad tagged datum -- CONTENTS" datum))))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))       
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))       
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  (put 'equ? '(scheme-number scheme-number)
        (lambda (x y) (= x y)))
  (put '=zero? '(scheme-number)
       (lambda (arg) (= arg 0.0)))
  (put 'negate '(scheme-number)
       (lambda (x) (make-scheme-number (- x))))     
'done)

(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (install-rational-package)
  ;; internal procedures
  (define (numer x) ( car x))
  (define (denom x) ( cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))

  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))                                                                
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational)
       (lambda (n1 n2) (= (* (numer n1) (denom n2))
                          (* (numer n2) (denom n1)))))
  (put '=zero? '(rational)
       (lambda (arg) (= (numer arg) 0.0)))
  (put 'negate '(rational)
       (lambda (x) (make-rational (- (numer x)) (denom x))))                                                                                                      
'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-rectangular-package)
  ;; internal procedures 
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))
  
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'negate '(rectangular)
       (lambda (x) (make-complex-from-real-imag (- (real-part x)) (- (imag-part x)))))
  'done)

(define (install-polar-package)
  ;;internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))

  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a)))) 
  (put 'negate '(polar)
       (lambda (x) (make-complex-from-mag-ang (- (magnitude x)) (angle x))))                  
  'done)
   
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))            
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))  

(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))

  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))  
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))  
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))

  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'add '(complex complex)
          (lambda (z1 z2) (tag (add-complex z1 z2))))                     
  (put 'sub '(complex complex)
          (lambda (z1 z2) (tag (sub-complex z1 z2))))                     
  (put 'mul '(complex complex)
          (lambda (z1 z2) (tag (mul-complex z1 z2))))                     
  (put 'div '(complex complex)
          (lambda (z1 z2) (tag (div-complex z1 z2))))                     
  (put 'make-from-real-imag 'complex
          (lambda (x y) (tag (make-from-real-imag x y))))                     
  (put 'make-from-mag-ang 'complex
          (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'equ? '(complex complex)
          (lambda (z1 z2) (and (= (real-part z1) (real-part z2))
                              (= (imag-part z1) (imag-part z2)))))
  (put '=zero? '(complex)
          (lambda (arg) (= (magnitude arg) 0.0)))
  (put 'negate '(complex) negate)                                                        
  'done)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))

(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(define (equ? n1 n2)
  (if (eq? (type-tag n1) (type-tag n2))
      (apply-generic 'equ? n1 n2)
      #f))

(define (=zero? arg)
  (apply-generic '=zero? arg))  

(define (scheme-number->complex n)
  (make-complex-from-real-imag (contents n) 0))

(define (scheme-number->rational n)
  (make-rational (contents n) 1))

(define (numer x) (apply-generic 'numer x))
(define (denom x) (apply-generic 'denom x))  

(define (rational->complex n)
  (make-complex-from-real-imag (* 1.0 (/ (numer (contents n)) 
                                         (denom (contents n))))
                               0))

(put-coercion 'scheme-number 'complex scheme-number->complex)
(put-coercion 'scheme-number 'rational scheme-number->rational)
(put-coercion 'rational 'complex rational->complex)

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (eq? type1 type2)
                    (error "No method for these types"
                           (list op type-tags))
                    (let ((t1->t2 (get-coercion type1 type2))
                      (t2->t1 (get-coercion type2 type1)))
                  (cond (t1->t2
                          (apply-generic op (t1->t2 a1) a2))
                        (t2->t1
                          (apply-generic op a1 (t2->t1 a2)))
                        (else
                          (error "No method for these types"
                                 (list op type-tags)))))))
              (error "No method for these types"
                   (list op type-tags)))))))

(define (negate x) (apply-generic 'negate x))


(define (install-sparse-termlist-representation)
  (define (the-empty-termlist termlist) '())
  (define (empty-termlist? termlist) (null? termlist))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (first-term termlist)
    (car termlist))
  (define (rest-terms termlist)
    (cdr termlist))
  (define (adjoin-term term termlist)
    (if (=zero? (coeff term))
        termlist
        (cons term termlist)))
  (define (negate-termlist termlist)
    (if (empty-termlist? termlist)
        (the-empty-termlist termlist)
        (adjoin-term (make-term (order (first-term termlist)) 
                                (negate (coeff (first-term termlist))))
                     (negate-termlist (rest-terms termlist)))))                        
  ; interface
  (define (tag x) (attach-tag 'sparse x))
  (put 'empty-termlist? '(sparse)
        empty-termlist?)
  (put 'first-term '(sparse)
       first-term)
  (put 'rest-terms '(sparse)
       (lambda (termlist) (tag (rest-terms termlist))))       
  (put 'adjoin-term 'sparse
       (lambda (term termlist) (tag (adjoin-term term termlist))))
  (put 'negate-termlist '(sparse)
       (lambda (termlist) (tag (negate-termlist termlist))))
  (put 'the-empty-termlist '(sparse) 
        (lambda (termlist) (tag (the-empty-termlist termlist))))
'done)

(define (install-dense-termlist-representation)
  (define (the-empty-termlist termlist) '())
  (define (empty-termlist? termlist) (null? termlist))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (first-term termlist)
    (make-term (- (length termlist) 1)
               (car termlist)))
  (define (rest-terms termlist)
    (cdr termlist))
  (define (adjoin-term term termlist)
    (cond ((=zero? (coeff term)) termlist)
          ((< (order term) (length termlist)) (error "Cannot adjoin smaller order term to termlist --ADJOIN TERM" term))
          ((= (order term) (length termlist)) (cons (coeff term) termlist))
          (else (adjoin-term term (cons 0 termlist)))))
  (define (negate-termlist termlist)
    (if (empty-termlist? termlist)
        (the-empty-termlist termlist)
        (adjoin-term (make-term (order (first-term termlist)) 
                                (negate (coeff (first-term termlist))))
                     (negate-termlist (rest-terms termlist)))))          
  ; interface
  (define (tag x) (attach-tag 'dense x))
  (put 'empty-termlist? '(dense)
       empty-termlist?)
  (put 'first-term '(dense)
       first-term)
  (put 'rest-terms '(dense)
       (lambda (termlist) (tag (rest-terms termlist))))
  (put 'adjoin-term 'dense
       (lambda (term termlist) (tag (adjoin-term term termlist))))
  (put 'negate-termlist '(dense)
       (lambda (termlist) (tag (negate-termlist termlist)))) 
  (put 'the-empty-termlist '(dense) 
        (lambda (termlist) (tag (the-empty-termlist termlist))))      
'done)

(define (empty-termlist? termlist) (apply-generic 'empty-termlist? termlist))

(define (the-empty-termlist termlist) (apply-generic 'the-empty-termlist termlist))

(define (first-term termlist) (apply-generic 'first-term termlist))

(define (rest-terms termlist) (apply-generic 'rest-terms termlist))

(define (adjoin-term term termlist) ((get 'adjoin-term (type-tag termlist)) term (contents termlist)))

(define (negate-termlist termlist) (apply-generic 'negate-termlist termlist))

(define (install-polynomial-package)
  (define (sparse-termlist? termlist) (eq? (type-tag termlist) 'sparse))
  (define (dense-termlist? termlist) (eq? (type-tag termlist) 'dense))
  (define (make-poly var termlist)
    (cons var termlist))
  (define (variable p)
    (car p))
  (define (term-list p)
    (cdr p))
  (define (variable? x)
    (symbol? x))
  (define (same-variable? x y)
    (and (variable? x) (variable? y) (eq? x y)))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var --ADD-POLY" (list p1 p2))))        
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
            (let ((t1 (first-term L1)) (t2 (first-term L2)))
              (cond ((> (order t1) (order t2))
                     (adjoin-term t1 (add-terms (rest-terms L1) L2)))
                    ((< (order t1) (order t2))
                     (adjoin-term t2 (add-terms L1 (rest-terms L2))))
                    (else (adjoin-term (make-term (order t1)
                                                  (add (coeff t1) (coeff t2)))
                                       (add-terms (rest-terms L1)
                                                  (rest-terms L2)))))))))
  (define (sub-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (add-poly p1 (negate p2))
        (error "Polys not in same var --SUB-POLY" (list p1 p2))))                                                  
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (error "Polys not in same var -- MUL-POLY" (list p1 p2))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist L1)
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist L)
        (let ((t2 (first-term L)))
          (adjoin-term (make-term (+ (order t1) (order t2))
                                  (mul (coeff t1) (coeff t2)))
                       (mul-term-by-all-terms t1 (rest-terms L))))))                                             
  (define (=zero? poly)
    (empty-termlist? (term-list poly)))
  (define (negate poly)
    (make-poly (variable poly) (negate-termlist (term-list poly))))                                                    
  (define (tag x) (attach-tag 'polynomial x))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial)
       (lambda (p1 p2) (tag (sub-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put '=zero? '(polynomial) =zero?)              
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  (put 'negate '(polynomial)
       (lambda (poly) (tag (negate poly))))                   
'done)

(define (make-polynomial var terms)
  ((get 'make 'polynomial) var terms))  
                         

(install-rectangular-package)
(install-polar-package)
(install-scheme-number-package)
(install-rational-package)
(install-complex-package)
(install-sparse-termlist-representation)
; (adjoin-term '(3 4) '(sparse (2 1) (1 4) (0 6)))
(install-dense-termlist-representation)
; (adjoin-term '(7 2) '(dense 2 1 6))
(install-polynomial-package)
(define p1 (make-polynomial 'x '(sparse (2 1) (1 4) (0 6))))
(define p2 (make-polynomial 'x '(sparse (3 4) (2 9) (0 6))))
(define p3 (negate p2))
(add p1 p2)
(define zero-pol (add p2 p3))
zero-pol
(=zero? zero-pol)
(sub p2 p2)
(define p4 (make-polynomial 'x '(dense 2 1 6)))
(define p5 (make-polynomial 'x '(dense -2 -1 -6)))
(define p6 (make-polynomial 'x '(dense 5 4 2 10)))
(add p4 p5)
(mul p4 p6)
(mul p1 p2)
(mul p1 p6)

